Ext.define('BestSoft.override.app.Controller', {
    override: 'Ext.app.Controller',

	/**
	 * Alias of controller's main view.
	 * If not configured, getMainViewAlias() will to compute it using controller class name at first call.
	 */
	mainViewAlias: null,


	/**
	 * Shortcut to register multiple {@link #refs reference}.
	 * @param {Array} refs
	 * @param {String} [selectorPrefix]    Optional. A prefix for all ref selectors
	 */
	addRefs: function(refs, selectorPrefix) {
		var me = this;
		Ext.Array.forEach(refs, function(ref) {
			if(selectorPrefix)
				ref.selector = selectorPrefix + ' ' + ref.selector;
			if(!me.hasRef(ref.ref)) //do not create same ref twice
			{
				me.ref([ref]);
			}
		}, this);
	},


	/**
	 * Registers multiple references using 'ref' configuration of descendant components.
	 *
	 * If component has 'allowMultipleInstances' config set, reference name will be built using
	 * component id and it will be impossible to get component using generated method.
	 * In that case getRef() method (it is also overridden here) should be called to get such element.
	 *
	 * @param {Ext.Component} oComponent    A root component
	 */
	addComponentRefs: function(oComponent) {
		var allowMultipleInstances = oComponent.allowMultipleInstances || false;
		var me = this,
			refElements = oComponent.query('[ref]'),
			baseCmpAlias = oComponent.getMainAlias();

		if(oComponent.hasOwnProperty('ref'))
			refElements.push(oComponent);

		if(allowMultipleInstances)
		{
			var baseCmpId = oComponent.getId(),
				refSuffix = '_' + Ext.String.createVarName(baseCmpId),
				baseCmpSelector = baseCmpAlias + '#' + baseCmpId;

			Ext.Array.each(refElements, function(oEl) {
				var ref = oEl.ref + refSuffix;
				if(!me.hasRef(ref)) //do not create same ref twice
				{
					var refConfig = {
						ref: ref,
						selector: baseCmpSelector + ' [ref="' + oEl.ref + '"]'
					};
					if(oEl == oComponent)
						refConfig.selector = baseCmpSelector;

					oEl._refBaseCmpId = baseCmpId;
					me.ref([refConfig]);

					// Generate getter function, which will return referenced element.
					// Default getter function generated by Ext core will have too long name to use it.
					var fn = 'get' + Ext.String.capitalize(oEl.ref);
					if(!me[fn])
					{
						me[fn] = Ext.Function.pass(me.getComponentByRef, [fn, oEl.ref], me);
					}
				}
			});
		}
		else
		{
			Ext.Array.each(refElements, function(oEl) {
				if(!me.hasRef(oEl.ref)) //do not create same ref twice
				{
					var refConfig = {
						ref: oEl.ref,
						selector: baseCmpAlias + ' [ref="' + oEl.ref + '"]'
					};
					if(oEl == oComponent)
						refConfig.selector = baseCmpAlias;
					me.ref([refConfig]);
				}
			});
		}
	},


	/**
	 * Returns element by his reference.
	 * Container component's 'allowMultipleInstances' config is taken into account.
	 *
	 * @param {Function} fn    A name of function which was called initially
	 * @param {String} ref    A reference to get
	 * @param {Ext.Component} [element]    Optional. Some element, which has reference set via addComponentRefs()
	 *
	 * @return {Ext.Component}
	 */
	getComponentByRef: function(fn, ref, element) {
		if(element) //element is given, continuing in allowMultipleInstances=true mode
		{
			var baseCmpId = element._refBaseCmpId;
			if(!baseCmpId)
			{
				var oBaseCmp;
				if(element.allowMultipleInstances)
				{
					oBaseCmp = element;
				}
				else
				{
					oBaseCmp = element.up('[allowMultipleInstances=true]');
				}
				if(oBaseCmp)
				{
					baseCmpId = oBaseCmp.getId();
				}
				else
				{
					//<debug>
					Ext.Error.raise(
						'Element does not contain reference to its top-level component. ' +
						'Maybe addComponentRefs() was not called previously?'
					);
					//</debug>
					return null;
				}
			}
			var refSuffix = '_' + Ext.String.createVarName(baseCmpId);
			ref = ref + refSuffix;
			return this['get' + Ext.String.capitalize(ref)]();
		}
		//<debug>
		else
		{
			Ext.Error.raise({
				msg: 'No "element" passed to '+fn+'() method.',
				ref: ref,
				element: element
			});
		}
		//</debug>
		return null;
	},


	/**
	 * Creates a new instance of controller main view.
	 * @return {Ext.view.View}
	 */
	createMainView: function() {
		return Ext.ClassManager.instantiateByAlias('widget.'+this.getMainViewAlias());
	},


	/**
	 * Returns alias of main view
	 * @return {String}
	 */
	getMainViewAlias: function() {
		if(this.mainViewAlias)
			return this.mainViewAlias;

		var name = Ext.ClassManager.getName(this);
		var alias = name.split(this.application.name + '.controller.');
		alias = alias[1].replace(/\.(.)/g, function(match, group1) {
			return Ext.String.capitalize(group1);
		});
		this.mainViewAlias = Ext.String.uncapitalize(alias);
		return this.mainViewAlias;
	}
});
